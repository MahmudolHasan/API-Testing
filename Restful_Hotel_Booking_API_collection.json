{
	"info": {
		"_postman_id": "b7373136-ac5d-4714-96b7-8326ffcb86ec",
		"name": "Restful_Hotel_Booking_API",
		"description": "This Postman collection provides API testing queries and examples for the Restful Hotel Booking API, allowing one to efficiently handle hotel bookings.\n\n**Introduction**\n\n- The Restful Booker API is a made-up API for handling hotel reservations.\n- This collection includes requests for several API endpoints to create, change, retrieve, and remove bookings.\n- It further demonstrates how to handle token-based authentication.\n    \n\n**Getting Started**\n\n1. **Setting up Environment:**\n    \n    - Import the \"Hotel Booking API Environment\" package to control environment variables.\n    - Set the \"BaseUrl\" variable to [https://restful-booker.herokuapp.com](https://restful-booker.herokuapp.com/).\n        \n\n**API Requests**\n\nThis section describes several API endpoints and how to use them.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29102085"
	},
	"item": [
		{
			"name": "Avaibility Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"if (status_code == 201) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/ping",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"ping"
					]
				},
				"description": "A quick endpoint check to verify if the API is active and running.\n\n**EndPoint:** _**/ping**_\n\n**Method:** _**POST**_"
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/ping",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "7"
						},
						{
							"key": "Etag",
							"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 14:31:15 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Created"
				}
			]
		},
		{
			"name": "Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token=pm.response.json(); // save the token from response in a variable \r",
							"\r",
							"pm.environment.set(\"tokenid\",token.token) //set the variable in environment \r",
							"\r",
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"\r",
							"if (status_code == 200) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/auth",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Create a authentication token to use in _**PUT/ PATCH/ DELETE**_ method.\n\n**EndPoint:** _**/auth**_\n\n**Method:** _**POST**_\n\nComments:\n\n- Save the token from response in a variable the environment for further use."
			},
			"response": [
				{
					"name": "auth",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "27"
						},
						{
							"key": "Etag",
							"value": "W/\"1b-oECuy5EWZKK6C78tLQ2ncVyoA2g\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:25:17 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"4e5450907bd8976\"\n}"
				}
			]
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let firstname = pm.varibale"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jdata = pm.response.json(); // Save the server full response in a variable \r",
							"pm.environment.set(\"id\", jdata.bookingid) // save the id from from variable in environment as another variable \r",
							"\r",
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"\r",
							"if (status_code == 200) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"Cameron\",\r\n\t\"lastname\" : \"Winter\",\r\n\t\"totalprice\" : 1110,\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n        \"checkin\": \"2023-05-09\",\r\n        \"checkout\": \"2023-07-09\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast,Dinner\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				},
				"description": "This request creates a new booking with provided information.\n\n**EndPoint**: _**/booking**_\n\n**Method :** _**POST**_\n\nComments:\n\n- The server would give an id along with full booking information as reponse.\n- The booking id should be saved in environment as \"booking_id\" and can be used in other requests."
			},
			"response": [
				{
					"name": "Create Booking",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"firstname\" : \"Cameron\",\r\n\t\"lastname\" : \"Winter\",\r\n\t\"totalprice\" : 1110,\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n        \"checkin\": \"2023-05-09\",\r\n        \"checkout\": \"2023-07-09\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast,Dinner\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking/",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "210"
						},
						{
							"key": "Etag",
							"value": "W/\"d2-3Y0VRO+PulugrdZui4aOpbvtXLk\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:25:07 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"bookingid\": 1758,\n    \"booking\": {\n        \"firstname\": \"Cameron\",\n        \"lastname\": \"Winter\",\n        \"totalprice\": 1110,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"2023-05-09\",\n            \"checkout\": \"2023-07-09\"\n        },\n        \"additionalneeds\": \"Breakfast,Dinner\"\n    }\n}"
				}
			]
		},
		{
			"name": "Get Booking Info by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var jdata = pm.response.json(); // Saving the server response in an variable \r",
							"pm.environment.set(\"id\", jdata.bookingid)\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"    pm.expect(jdata.firstname).to.equal(\"Cameron\")\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\", function(){\r",
							"    pm.expect(jdata.lastname).to.equal(\"Winter\")\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function(){\r",
							"    pm.expect(jdata.totalprice).to.equal(1110)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function(){\r",
							"    pm.expect(jdata.depositpaid).to.equal(true)\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Validation\", function(){\r",
							"    pm.expect(jdata.bookingdates.checkin).to.equal(\"2023-05-09\")\r",
							"})\r",
							"\r",
							"pm.test(\"Checkout validation\", function(){\r",
							"    pm.expect(jdata.bookingdates.checkout).to.equal(\"2023-07-09\")\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation\", function(){\r",
							"    pm.expect(jdata.additionalneeds).to.equal(\"Breakfast,Dinner\")\r",
							"})\r",
							"\r",
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"\r",
							"if (status_code == 200) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Obtain booking details by ID.\n\n**EndPoint**: _**/booking/{{booking_id}}**_\n\n**Method :** _**GET**_\n\nComments:\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request."
			},
			"response": [
				{
					"name": "Get Update Booking Info Copy",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "181"
						},
						{
							"key": "Etag",
							"value": "W/\"b5-clFZHmSFRayjlHrBGD/7M9VUWDI\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:25:12 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Cameron\",\n    \"lastname\": \"Winter\",\n    \"totalprice\": 1110,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2023-05-09\",\n        \"checkout\": \"2023-07-09\"\n    },\n    \"additionalneeds\": \"Breakfast,Dinner\"\n}"
				}
			]
		},
		{
			"name": "Partial Update Booking Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jdata = pm.response.json(); // Saving the server response in an variable \r",
							"\r",
							"\r",
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"\r",
							"if (status_code == 200) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{tokenid}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"firstname\" : \"James\"\t\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Update specific booking informaton for a specific id\n\n**EndPoint:** _**/booking/{{booking_id}}**_\n\n**Method:** _**PATCH**_\n\nComments:\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request.\n    \n- Use the variable store the token in header sectionset the \"token\" for authentication."
			},
			"response": [
				{
					"name": "Partial Update Booking Info",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{tokenid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"James\"\t\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/booking/{{id}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "179"
						},
						{
							"key": "Etag",
							"value": "W/\"b3-gpoOHhPEiRR/t0bMZS53wHgBYfA\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 09:55:19 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"James\",\n    \"lastname\": \"Winter\",\n    \"totalprice\": 1110,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2023-05-09\",\n        \"checkout\": \"2023-07-09\"\n    },\n    \"additionalneeds\": \"Breakfast,Dinner\"\n}"
				}
			]
		},
		{
			"name": "Get partial updated Booking Info by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var jdata = pm.response.json(); // Saving the server response in an variable \r",
							"pm.environment.set(\"id\", jdata.bookingid)\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"    pm.expect(jdata.firstname).to.equal(\"James\")\r",
							"})\r",
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"\r",
							"if (status_code == 200) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Obtain booking details by ID.\n\n**EndPoint**: _**/booking/{{booking_id}}**_\n\n**Method :** _**GET**_\n\nComments:\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request."
			},
			"response": [
				{
					"name": "Get Booking Info by ID Copy",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/booking/{{id}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "179"
						},
						{
							"key": "Etag",
							"value": "W/\"b3-gpoOHhPEiRR/t0bMZS53wHgBYfA\""
						},
						{
							"key": "Date",
							"value": "Sun, 17 Sep 2023 00:25:47 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"James\",\n    \"lastname\": \"Winter\",\n    \"totalprice\": 1110,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2023-05-09\",\n        \"checkout\": \"2023-07-09\"\n    },\n    \"additionalneeds\": \"Breakfast,Dinner\"\n}"
				}
			]
		},
		{
			"name": "Update booking data Info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let statuscode =pm.response.code\r",
							"console.log(statuscode)\r",
							"switch(statuscode){\r",
							"    case(200):\r",
							"    pm.test(\"OK 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"    break;\r",
							"    case(400):\r",
							"    pm.test(\"Bad Request 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"    break;\r",
							"    case(403):\r",
							"    pm.test(\"Forbidden 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"    break;\r",
							"    case(404):\r",
							"    pm.test(\"Forbidden 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"    break;\r",
							"\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{tokenid}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"Harry\",\r\n\t\"lastname\" : \"Diaz\",\r\n\t\"totalprice\" : 2110,\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n        \"checkin\": \"2023-05-09\",\r\n        \"checkout\": \"2023-07-09\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast,Dinner\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Change the booking information of specific id.\n\n**EndPoint:** _**/booking/{{booking_id}}**_\n\n**Method:** _**POST**_\n\nComments:\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request.\n- Use the variable store the token in header sectionset the \"token\" for authentication."
			},
			"response": [
				{
					"name": "Update booking data Copy",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{tokenid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"firstname\" : \"Harry\",\r\n\t\"lastname\" : \"Diaz\",\r\n\t\"totalprice\" : 1110,\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n        \"checkin\": \"2023-05-09\",\r\n        \"checkout\": \"2023-07-09\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast,Dinner\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "177"
						},
						{
							"key": "Etag",
							"value": "W/\"b1-PgPlrb+wBmxtYT+z1XxxfHlZ4D4\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:25:49 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Harry\",\n    \"lastname\": \"Diaz\",\n    \"totalprice\": 1110,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2023-05-09\",\n        \"checkout\": \"2023-07-09\"\n    },\n    \"additionalneeds\": \"Breakfast,Dinner\"\n}"
				}
			]
		},
		{
			"name": "Get Updated Booking Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jdata = pm.response.json();\r",
							"pm.environment.set(\"id\", jdata.bookingid)\r",
							"\r",
							"var jdata = pm.response.json();\r",
							"pm.environment.set(\"id\", jdata.bookingid)\r",
							"\r",
							"pm.test(\"First Name Validation\",function(){\r",
							"    pm.expect(jdata.firstname).to.equal(\"Harry\")\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation\", function(){\r",
							"    pm.expect(jdata.lastname).to.equal(\"Diaz\")\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation\", function(){\r",
							"    pm.expect(jdata.totalprice).to.equal(2110)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Deposit Paid Validation\", function(){\r",
							"    pm.expect(jdata.depositpaid).to.equal(true)\r",
							"})\r",
							"\r",
							"pm.test(\"CheckIn Validation\", function(){\r",
							"    pm.expect(jdata.bookingdates.checkin).to.equal(\"2023-05-09\")\r",
							"})\r",
							"\r",
							"pm.test(\"Checkout validation\", function(){\r",
							"    pm.expect(jdata.bookingdates.checkout).to.equal(\"2023-07-09\")\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation\", function(){\r",
							"    pm.expect(jdata.additionalneeds).to.equal(\"Breakfast,Dinner\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Obtain the updated booking information\n\n**EndPoint:** _**/booking/{{booking_id}}**_\n\n**Method:** _**GET**_\n\nComments:\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request."
			},
			"response": [
				{
					"name": "Get Update Booking Info",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "177"
						},
						{
							"key": "Etag",
							"value": "W/\"b1-PgPlrb+wBmxtYT+z1XxxfHlZ4D4\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:26:05 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Harry\",\n    \"lastname\": \"Diaz\",\n    \"totalprice\": 1110,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2023-05-09\",\n        \"checkout\": \"2023-07-09\"\n    },\n    \"additionalneeds\": \"Breakfast,Dinner\"\n}"
				}
			]
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let status_code =pm.response.code //save the server response code in a variable \r",
							"if (status_code == 201) //TO check if the response is 201 \r",
							"{ \r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})}\r",
							"else // If status code is anything other than 201\r",
							"{\r",
							"    pm.test(`Something went wrong!Status Code is ${status_code}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{tokenid}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				},
				"description": "Delete a booking by ID.\n\n**EndPoint:** _**/booking/{{booking_id}}**_\n\n**Method:** _**GET**_\n\n**Comment:**\n\n- Use variable _booking_id_ from environment or replace _{{booking_id}}_ with actual booking id saved from previous request.\n    \n- Use the variable store the token in header sectionset the \"token\" for authentication."
			},
			"response": [
				{
					"name": "Delete Booking",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{tokenid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/booking/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "7"
						},
						{
							"key": "Etag",
							"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
						},
						{
							"key": "Date",
							"value": "Sat, 16 Sep 2023 04:38:04 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Created"
				}
			]
		}
	]
}